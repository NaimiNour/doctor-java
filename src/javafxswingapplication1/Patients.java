package javafxswingapplication1;

import java.awt.Color;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import sql_classes.SqlConnectionMethods;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Bureau
 */
public class Patients extends javax.swing.JFrame {

    /**
     * Creates new form Patients
     */
    private SqlConnectionMethods sqlClass=new SqlConnectionMethods();

    private int indexSelectedRow=-1;
    private String user_name, type,name;
    public Patients( String user_name,String type,String name) {

        initComponents();
        this.setLocationRelativeTo ( null );
        this.setResizable(false);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            }
        });
        
        ImageIcon icon = new ImageIcon("C:/Users/Bureau/Documents/NetBeansProjects/JavaFXSwingApplication1/src/javafxswingapplication1/appointment (2).png"); // Replace with the actual path to your icon image
        setIconImage(icon.getImage());
        this.user_name=user_name;
        this.type=type;
        this.name=name;
        this.prepareTable();
        
        listChange=new int[1000][1000];
        rowChange=0;
        
        
             txt.addOption(new SearchOption("Nom", new ImageIcon(getClass().getResource("/images/user (1).png"))));
             txt.addOption(new SearchOption("Date de naissance", new ImageIcon(getClass().getResource("/images/receiver (1).png"))));
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txt = new javafxswingapplication1.TextFieldSearchOption();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 204, 255));
        setSize(new java.awt.Dimension(500, 300));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/left-arrow (1).png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash (1).png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/updated (1).png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtActionPerformed(evt);
            }
        });
        txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtKeyReleased(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Nom", "Prénom", "Numéro1"
            }
        ));
        jTable1.setRowHeight(20);
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 51));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(256, 256, 256)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
        );

        jLabel3.setBackground(new java.awt.Color(0, 153, 153));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/group-users (1).png"))); // NOI18N
        jLabel3.setText("Liste de patients");

        jButton6.setBackground(new java.awt.Color(204, 204, 255));
        jButton6.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add (1).png"))); // NOI18N
        jButton6.setText("Ajouter RDV");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(219, 219, 219)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jButton5)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.updatePatient();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.deletePatient();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.setVisible(false);  
        Principal principal= new Principal(this.user_name,this.type,this.name);
      //  new javax.swing.JFrame(), true,
        principal.setVisible(true);
          
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
         passParam();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtActionPerformed

    private void txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKeyReleased
        if(txt.isSelected()){
            int option = txt.getSelectedIndex();
            String text = "%" + txt.getText().trim() + "%";
            if(option==0){
                loadTable();
            }
            else if(option==1){
            loadTable1();
        }
        }
    }//GEN-LAST:event_txtKeyReleased

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Patients().setVisible(true);
//            }
//        });
//    } 
    
     private void passParam() {
         int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
        String nom=jTable1.getModel().getValueAt(this.indexSelectedRow, 1).toString();
     String prenom=jTable1.getModel().getValueAt(this.indexSelectedRow, 2).toString();
        String id=jTable1.getModel().getValueAt(this.indexSelectedRow, 0).toString();
     
     
      this.setVisible(false);
        AjouterRDV P1= new  AjouterRDV(this.user_name,this.type,this.name,nom,prenom,id);
        P1.setVisible(true);
    }
     else {
            JOptionPane.showMessageDialog(this, "SVP selectionnez la ligne à ajouter.");
        }}
    
    private void deletePatient() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
        String id=jTable1.getModel().getValueAt(this.indexSelectedRow, 0).toString();
        if(sqlClass.showConfirmDialog("Confirmation", "Voulez-vous vraiment supprimer patient code=" + id+" ??")==0){
            int result=sqlClass.execDeleteOrUpdateOrInsert(
                    "DELETE FROM `patients` WHERE `id_patient`="+id+" ;",
                    "succss to delete patient(id="+id+") ",
                    "faild to delete patient(id="+id+") because: "
            );
            if(result==1){
                sqlClass.alertInfo("Suppression du patient code=" + id);
            }else{
                sqlClass.alertERROR("Failed to deleted patient code=" + id);
            }
            this.prepareTable();
        }
    }
        else {
            JOptionPane.showMessageDialog(this, "SVP selectionnez la ligne à supprimer.");
        }}
    
    
    private void updatePatient() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
        if(sqlClass.showConfirmDialog("Confirmation", "Voulez-vous vraiement modifier patient table??")==0){
            String messageSuccss="Seccss to update patients:";
            String messageError="Failed to update patients:";
            boolean haveSuccsUpdate=false,haveErrorUpdate=false;
            for (int c=0;c<rowChange;c++) {
                String id=jTable1.getModel().getValueAt(listChange[c][0], 0).toString();
                int result=sqlClass.execDeleteOrUpdateOrInsert(
                    "UPDATE `patients` SET `name`='"+jTable1.getModel().getValueAt(listChange[c][0], 1).toString()+"',"
                            + "`family_name`='"+jTable1.getModel().getValueAt(listChange[c][0], 2).toString()+"',"
                            + "`birth_date`='"+jTable1.getModel().getValueAt(listChange[c][0], 3).toString()+"' "
                            + "WHERE `id_patient`="+id+";",
                    "succss to update patient(id="+id+") ",
                    "faild to update patient(id="+id+") because: "
                );
                if(result==1){
                    haveSuccsUpdate=true;
                    messageSuccss=messageSuccss+"\ncode:"+id;
                }else{
                    haveErrorUpdate=true;
                    messageError=messageError+"\ncode:"+id;
                }
            }
            if(haveSuccsUpdate){sqlClass.alertInfo(messageSuccss);}
            if(haveErrorUpdate){sqlClass.alertERROR(messageError);}
            this.prepareTable();
        }
        
        listChange=new int[1000][1000];
        rowChange=0;
    }
        else {
            JOptionPane.showMessageDialog(this, "SVP selectionnez la ligne à mis à jour");
        }
    }
    private void prepareTable(){
        ResultSet result=sqlClass.execSelect("SELECT * FROM `patients`;", "succss to get All patients ", "faild to get All patients because: ");
        try {
            DefaultTableModel model = new DefaultTableModel(){
//              this code for Make the ID non-editable on patients table
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column != 0; // Make the first column non-editable
                }
            };
            model.addColumn("Code");
            model.addColumn("Nom");
            model.addColumn("Prénom");
            model.addColumn("Type");
            model.addColumn("Numero1");
           ;
            if(!result.wasNull()){
                while(result.next()){
                    model.addRow(new Object[]{
                        result.getString("id_patient"), result.getString("name"), result.getString("family_name"),
                        result.getString("gender"),result.getString("Numero1"), null, null
                    });
                }
            }else{
                System.out.println("null");
            }
            // Customize the header's appearance
        JTableHeader tableHeader = jTable1.getTableHeader();
        tableHeader.setBackground(Color.PINK); // Set the header's background color
        tableHeader.setForeground(Color.WHITE); // Set the header's text color
        tableHeader.setFont(new Font("Arial", Font.BOLD, 14)); // Set the font and style of the header text

        // Center-align the header text
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) jTable1.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
            jTable1.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            sqlClass.alertERROR("faild to print All patients because: "+ex.getMessage());
        }
        
        
//        this code for get rowSelected on patients table
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTable1.getSelectedRow();
                    if (selectedRow != -1) {
                        indexSelectedRow=selectedRow;
                    }else{
                        indexSelectedRow=-1;
                    }
                }
            }
        });
        
//        this code for get any chaned on patients table
        jTable1.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                if (column != TableModelEvent.ALL_COLUMNS) {
                    listChange[rowChange][0]=row;
                    listChange[rowChange++][1]=column;
                    Object data = jTable1.getModel().getValueAt(row, column);
                }
            }
        });
    }
    
//    this list for get the row and column of edited vlue
    private int[][] listChange=new int[1000][1000];
//    this var for know the number of value in listChange
    private int rowChange=0;
    
        private void loadTable(){
        ResultSet result=sqlClass.execSelect("SELECT * FROM `patients` where name like '%" + txt.getText().trim() + "%' or family_name like '%" + txt.getText().trim() + "%'  "  , "succss to get All patients ", "faild to get All patients because: ");
        try {
            DefaultTableModel model = new DefaultTableModel(){
//              this code for Make the ID non-editable on patients table
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column != 0; // Make the first column non-editable
                }
            };
            model.addColumn("Code");
            model.addColumn("Nom");
            model.addColumn("Prénom");
            model.addColumn("Numero1");
           
            if(!result.wasNull()){
                while(result.next()){
                    model.addRow(new Object[]{
                        result.getString("id_patient"), result.getString("name"), result.getString("family_name"),
                        result.getString("Numero1"), null, null
                    });
                }
            }else{
                System.out.println("null");
            }
            jTable1.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            sqlClass.alertERROR("faild to print All patients because: "+ex.getMessage());
        }}
           private void loadTable1(){
        ResultSet result=sqlClass.execSelect("SELECT * FROM `patients` where Numero1  like '%" + txt.getText().trim() + "%' "  , "succss to get All patients ", "faild to get All patients because: ");
        try {
            DefaultTableModel model = new DefaultTableModel(){
//              this code for Make the ID non-editable on patients table
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column != 0; // Make the first column non-editable
                }
            };
            model.addColumn("Code");
            model.addColumn("Nom");
            model.addColumn("Prénom");
            model.addColumn("Numero1");
            
            if(!result.wasNull()){
                while(result.next()){
                    model.addRow(new Object[]{
                        result.getString("id_patient"), result.getString("name"), result.getString("family_name"),
                        result.getString("Numero1"), null, null
                    });
                }
            }else{
                System.out.println("null");
            }
            jTable1.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            sqlClass.alertERROR("faild to print All patients because: "+ex.getMessage());
        }}
           
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javafxswingapplication1.TextFieldSearchOption txt;
    // End of variables declaration//GEN-END:variables
}
